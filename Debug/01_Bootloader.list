
01_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b4  080030b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030bc  080030bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  080030d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080030d0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009628  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbc  00000000  00000000  000296a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000651  00000000  00000000  0002bed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a89  00000000  00000000  0002c521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c36c  00000000  00000000  0004dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8723  00000000  00000000  0005a316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002020  00000000  00000000  00122a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00124a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800307c 	.word	0x0800307c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800307c 	.word	0x0800307c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BL_FeatchHostCommand>:
}


/*  to check the data recieve from host is recieve or not */
uint8_t BL_FeatchHostCommand ()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	/* Default Status */
	BL_Status Status = BL_NACK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
	/* default status Of Uart */
	HAL_StatusTypeDef HAL_Status = HAL_ERROR ;
 800050a:	2301      	movs	r3, #1
 800050c:	71bb      	strb	r3, [r7, #6]
	/*  variable to store length of data packet */
	uint8_t Data_Length = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	717b      	strb	r3, [r7, #5]

	/* to store zero in host buffer in each time i call this func  */
	memset(Host_Buffer,0,HAL_MAX_SIZE);
 8000512:	22c8      	movs	r2, #200	; 0xc8
 8000514:	2100      	movs	r1, #0
 8000516:	482b      	ldr	r0, [pc, #172]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 8000518:	f002 fd84 	bl	8003024 <memset>

	/* recieve Data_Length */
	HAL_Status = HAL_UART_Receive(&huart2 ,Host_Buffer  , 1 , HAL_MAX_DELAY);
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	2201      	movs	r2, #1
 8000522:	4928      	ldr	r1, [pc, #160]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 8000524:	4828      	ldr	r0, [pc, #160]	; (80005c8 <BL_FeatchHostCommand+0xc8>)
 8000526:	f002 f9b6 	bl	8002896 <HAL_UART_Receive>
 800052a:	4603      	mov	r3, r0
 800052c:	71bb      	strb	r3, [r7, #6]

	if (HAL_Status != HAL_OK)
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <BL_FeatchHostCommand+0x3a>
	{
		Status = BL_NACK;
 8000534:	2300      	movs	r3, #0
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	e03e      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
	}
	else
	{
		Data_Length = Host_Buffer[0];//length i recieve
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	717b      	strb	r3, [r7, #5]
		HAL_Status = HAL_UART_Receive(&huart2 , &Host_Buffer[1] , Data_Length , HAL_MAX_DELAY);//CMD
 8000540:	797b      	ldrb	r3, [r7, #5]
 8000542:	b29a      	uxth	r2, r3
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	4920      	ldr	r1, [pc, #128]	; (80005cc <BL_FeatchHostCommand+0xcc>)
 800054a:	481f      	ldr	r0, [pc, #124]	; (80005c8 <BL_FeatchHostCommand+0xc8>)
 800054c:	f002 f9a3 	bl	8002896 <HAL_UART_Receive>
 8000550:	4603      	mov	r3, r0
 8000552:	71bb      	strb	r3, [r7, #6]

		if (HAL_Status != HAL_OK)
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d002      	beq.n	8000560 <BL_FeatchHostCommand+0x60>
			{
				Status = BL_NACK;
 800055a:	2300      	movs	r3, #0
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	e02b      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
			}//end if
			else
			{
               switch(Host_Buffer[1])
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 8000562:	785b      	ldrb	r3, [r3, #1]
 8000564:	3b10      	subs	r3, #16
 8000566:	2b06      	cmp	r3, #6
 8000568:	d824      	bhi.n	80005b4 <BL_FeatchHostCommand+0xb4>
 800056a:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <BL_FeatchHostCommand+0x70>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	0800058d 	.word	0x0800058d
 8000574:	08000595 	.word	0x08000595
 8000578:	0800059d 	.word	0x0800059d
 800057c:	080005b5 	.word	0x080005b5
 8000580:	080005a5 	.word	0x080005a5
 8000584:	080005ad 	.word	0x080005ad
 8000588:	080005ad 	.word	0x080005ad
               {
               case CBL_GET_VER_CMD:      BL_Get_Version(Host_Buffer);                    break;
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 800058e:	f000 f887 	bl	80006a0 <BL_Get_Version>
 8000592:	e011      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
               case CBL_GET_HELP_CMD:     BL_Get_Help(Host_Buffer);                       break;
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 8000596:	f000 f8bb 	bl	8000710 <BL_Get_Help>
 800059a:	e00d      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
               case CBL_GET_CID_CMD:      BL_Get_Chip_Identification(Host_Buffer);     break;
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 800059e:	f000 f8f3 	bl	8000788 <BL_Get_Chip_Identification>
 80005a2:	e009      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
               case CBL_GO_TO_ADDR_CMD:   BL_Get_Version(Host_Buffer); break;
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 80005a6:	f000 f87b 	bl	80006a0 <BL_Get_Version>
 80005aa:	e005      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
               case CBL_FLASH_ERASE_CMD: // BL_Flash_Erase(Host_Buffer);    break;
               case CBL_MEM_WRITE_CMD:    BL_Write_Data(Host_Buffer);
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <BL_FeatchHostCommand+0xc4>)
 80005ae:	f000 f951 	bl	8000854 <BL_Write_Data>
      break;
 80005b2:	e001      	b.n	80005b8 <BL_FeatchHostCommand+0xb8>
               default : Status = BL_NACK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	71fb      	strb	r3, [r7, #7]
               }//end switch
			}//end else
	}//end first else
}//end func
 80005b8:	bf00      	nop
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028
 80005c8:	200000f8 	.word	0x200000f8
 80005cc:	20000029 	.word	0x20000029

080005d0 <BL_CRC_Verfiy>:



/* check crc verifiy  */
static uint32_t BL_CRC_Verfiy(uint8_t *pdata , uint32_t Data_Length , uint32_t Host_CRC)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFING_FAILED;//default status
 80005dc:	2300      	movs	r3, #0
 80005de:	77fb      	strb	r3, [r7, #31]
	uint32_t databuffer =0 ;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
	uint32_t MCU_CRC =0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]

	for (uint8_t counter=0 ; counter < Data_Length ; counter++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	75fb      	strb	r3, [r7, #23]
 80005ec:	e00f      	b.n	800060e <BL_CRC_Verfiy+0x3e>
	{
		databuffer = (uint32_t)pdata[counter];
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	613b      	str	r3, [r7, #16]
		MCU_CRC = HAL_CRC_Accumulate(&hcrc ,&databuffer , 1);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <BL_CRC_Verfiy+0x74>)
 8000602:	f000 fdee 	bl	80011e2 <HAL_CRC_Accumulate>
 8000606:	61b8      	str	r0, [r7, #24]
	for (uint8_t counter=0 ; counter < Data_Length ; counter++)
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	3301      	adds	r3, #1
 800060c:	75fb      	strb	r3, [r7, #23]
 800060e:	7dfb      	ldrb	r3, [r7, #23]
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	429a      	cmp	r2, r3
 8000614:	d8eb      	bhi.n	80005ee <BL_CRC_Verfiy+0x1e>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <BL_CRC_Verfiy+0x74>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <BL_CRC_Verfiy+0x74>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f042 0201 	orr.w	r2, r2, #1
 8000624:	609a      	str	r2, [r3, #8]
	if (Host_CRC == MCU_CRC)
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	429a      	cmp	r2, r3
 800062c:	d102      	bne.n	8000634 <BL_CRC_Verfiy+0x64>
	{
		CRC_Status = CRC_VERIFING_PASS;
 800062e:	2301      	movs	r3, #1
 8000630:	77fb      	strb	r3, [r7, #31]
 8000632:	e001      	b.n	8000638 <BL_CRC_Verfiy+0x68>
	}
	else
	{
		CRC_Status = CRC_VERIFING_FAILED;
 8000634:	2300      	movs	r3, #0
 8000636:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000638:	7ffb      	ldrb	r3, [r7, #31]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200000f0 	.word	0x200000f0

08000648 <BL_Send_ACK>:


static void BL_Send_ACK(uint8_t dataLen)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_Value[2]={0};
 8000652:	2300      	movs	r3, #0
 8000654:	81bb      	strh	r3, [r7, #12]
	ACK_Value[0]=SEND_ACK;
 8000656:	23cd      	movs	r3, #205	; 0xcd
 8000658:	733b      	strb	r3, [r7, #12]
	ACK_Value[1]=dataLen;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2,(uint8_t*)ACK_Value,2,HAL_MAX_DELAY);
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	2202      	movs	r2, #2
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <BL_Send_ACK+0x30>)
 800066a:	f002 f889 	bl	8002780 <HAL_UART_Transmit>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000f8 	.word	0x200000f8

0800067c <BL_Send_NACK>:


static void BL_Send_NACK()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	uint8_t ACk_Value=SEND_NACK;
 8000682:	23ab      	movs	r3, #171	; 0xab
 8000684:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2,&ACk_Value,sizeof(ACk_Value),HAL_MAX_DELAY);
 8000686:	1df9      	adds	r1, r7, #7
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	2201      	movs	r2, #1
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <BL_Send_NACK+0x20>)
 8000690:	f002 f876 	bl	8002780 <HAL_UART_Transmit>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000f8 	.word	0x200000f8

080006a0 <BL_Get_Version>:


static void BL_Get_Version(uint8_t *Host_Buffer)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	uint8_t Version[4]={CBL_VENDOR_ID,CBL_SW_MAJOR_VERSION,CBL_SW_MINOR_VERSION,CBL_SW_PATCH_VERSION};
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <BL_Get_Version+0x68>)
 80006aa:	60fb      	str	r3, [r7, #12]
	uint16_t Host_Packet_Len=0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_valu=0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
	Host_Packet_Len =  Host_Buffer[0]+1;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	82fb      	strh	r3, [r7, #22]
	CRC_valu = *(uint32_t*)(Host_Buffer+Host_Packet_Len -4);
 80006be:	8afb      	ldrh	r3, [r7, #22]
 80006c0:	3b04      	subs	r3, #4
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFING_PASS == BL_CRC_Verfiy((uint8_t*)&Host_Buffer[0],Host_Packet_Len-4,CRC_valu))
 80006ca:	8afb      	ldrh	r3, [r7, #22]
 80006cc:	3b04      	subs	r3, #4
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff ff7c 	bl	80005d0 <BL_CRC_Verfiy>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10d      	bne.n	80006fa <BL_Get_Version+0x5a>
	{Bootloader_Jump_To_Application();
 80006de:	f000 f95d 	bl	800099c <Bootloader_Jump_To_Application>
		BL_Send_ACK(4);
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff ffb0 	bl	8000648 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)Version,4,HAL_MAX_DELAY);
 80006e8:	f107 010c 	add.w	r1, r7, #12
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2204      	movs	r2, #4
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <BL_Get_Version+0x6c>)
 80006f4:	f002 f844 	bl	8002780 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 80006f8:	e001      	b.n	80006fe <BL_Get_Version+0x5e>
		BL_Send_NACK();
 80006fa:	f7ff ffbf 	bl	800067c <BL_Send_NACK>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	01010164 	.word	0x01010164
 800070c:	200000f8 	.word	0x200000f8

08000710 <BL_Get_Help>:

static void BL_Get_Help(uint8_t *Host_Buffer)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint8_t BL_Support_CMD[6] = {
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <BL_Get_Help+0x70>)
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000722:	6018      	str	r0, [r3, #0]
 8000724:	3304      	adds	r3, #4
 8000726:	8019      	strh	r1, [r3, #0]
			CBL_GET_CID_CMD,
			CBL_GO_TO_ADDR_CMD,
			CBL_FLASH_ERASE_CMD,
			CBL_MEM_WRITE_CMD
	};
	uint16_t Host_Packet_Len=0;
 8000728:	2300      	movs	r3, #0
 800072a:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_valu=0;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
	Host_Packet_Len =  Host_Buffer[0]+1;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	3301      	adds	r3, #1
 8000738:	82fb      	strh	r3, [r7, #22]
	CRC_valu = *(uint32_t*)(Host_Buffer+Host_Packet_Len -4);
 800073a:	8afb      	ldrh	r3, [r7, #22]
 800073c:	3b04      	subs	r3, #4
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFING_PASS == BL_CRC_Verfiy((uint8_t*)&Host_Buffer[0],Host_Packet_Len-4,CRC_valu))
 8000746:	8afb      	ldrh	r3, [r7, #22]
 8000748:	3b04      	subs	r3, #4
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	4619      	mov	r1, r3
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff3e 	bl	80005d0 <BL_CRC_Verfiy>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d10b      	bne.n	8000772 <BL_Get_Help+0x62>
	{
		BL_Send_ACK(6);
 800075a:	2006      	movs	r0, #6
 800075c:	f7ff ff74 	bl	8000648 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)BL_Support_CMD,4,HAL_MAX_DELAY);
 8000760:	f107 0108 	add.w	r1, r7, #8
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2204      	movs	r2, #4
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <BL_Get_Help+0x74>)
 800076c:	f002 f808 	bl	8002780 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 8000770:	e001      	b.n	8000776 <BL_Get_Help+0x66>
		BL_Send_NACK();
 8000772:	f7ff ff83 	bl	800067c <BL_Send_NACK>
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08003094 	.word	0x08003094
 8000784:	200000f8 	.word	0x200000f8

08000788 <BL_Get_Chip_Identification>:

static void BL_Get_Chip_Identification(uint8_t *Host_Buffer)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	uint16_t Chip_ID=0;
 8000790:	2300      	movs	r3, #0
 8000792:	81fb      	strh	r3, [r7, #14]
	uint16_t Host_Packet_Len=0;
 8000794:	2300      	movs	r3, #0
 8000796:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_valu=0;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
	Host_Packet_Len =  Host_Buffer[0]+1;//PACKET_LENGTH = 6
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3301      	adds	r3, #1
 80007a4:	82fb      	strh	r3, [r7, #22]
	CRC_valu = *(uint32_t*)(Host_Buffer+Host_Packet_Len -4);
 80007a6:	8afb      	ldrh	r3, [r7, #22]
 80007a8:	3b04      	subs	r3, #4
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFING_PASS == BL_CRC_Verfiy((uint8_t*)&Host_Buffer[0],Host_Packet_Len-4,CRC_valu))
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	3b04      	subs	r3, #4
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff08 	bl	80005d0 <BL_CRC_Verfiy>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d112      	bne.n	80007ec <BL_Get_Chip_Identification+0x64>
	{
		Chip_ID = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF);
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <BL_Get_Chip_Identification+0x70>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	81fb      	strh	r3, [r7, #14]
		BL_Send_ACK(2);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff ff37 	bl	8000648 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2,(uint8_t*)&Chip_ID,2,HAL_MAX_DELAY);
 80007da:	f107 010e 	add.w	r1, r7, #14
 80007de:	f04f 33ff 	mov.w	r3, #4294967295
 80007e2:	2202      	movs	r2, #2
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <BL_Get_Chip_Identification+0x74>)
 80007e6:	f001 ffcb 	bl	8002780 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 80007ea:	e001      	b.n	80007f0 <BL_Get_Chip_Identification+0x68>
		BL_Send_NACK();
 80007ec:	f7ff ff46 	bl	800067c <BL_Send_NACK>
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	e0042000 	.word	0xe0042000
 80007fc:	200000f8 	.word	0x200000f8

08000800 <BL_Address_Varification>:

static uint8_t BL_Address_Varification(uint32_t Addresss)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	uint8_t Adress_varfiy=ADDRESS_IS_INVALID;
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]
	if(Addresss>=FLASH_BASE &&Addresss<=STM32F446_FLASH_END)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000812:	d306      	bcc.n	8000822 <BL_Address_Varification+0x22>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0d      	ldr	r2, [pc, #52]	; (800084c <BL_Address_Varification+0x4c>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d802      	bhi.n	8000822 <BL_Address_Varification+0x22>
	{
		Adress_varfiy=ADDRESS_IS_VALID;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e00c      	b.n	800083c <BL_Address_Varification+0x3c>
	}
	else if(Addresss>=SRAM_BASE &&Addresss<=STM32F446_SRAM_END)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000828:	d306      	bcc.n	8000838 <BL_Address_Varification+0x38>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a08      	ldr	r2, [pc, #32]	; (8000850 <BL_Address_Varification+0x50>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d802      	bhi.n	8000838 <BL_Address_Varification+0x38>
	{
		Adress_varfiy=ADDRESS_IS_VALID;
 8000832:	2301      	movs	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e001      	b.n	800083c <BL_Address_Varification+0x3c>
	}
	else{
		Adress_varfiy=ADDRESS_IS_INVALID;
 8000838:	2300      	movs	r3, #0
 800083a:	73fb      	strb	r3, [r7, #15]
	}
	return Adress_varfiy;
 800083c:	7bfb      	ldrb	r3, [r7, #15]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	08080000 	.word	0x08080000
 8000850:	20020000 	.word	0x20020000

08000854 <BL_Write_Data>:




static void BL_Write_Data(uint8_t *Host_buffer)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	uint8_t Adress_varfiy=ADDRESS_IS_INVALID;
 800085c:	2300      	movs	r3, #0
 800085e:	72fb      	strb	r3, [r7, #11]
	uint32_t Address_Host=0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
	uint8_t DataLen=0;
 8000864:	2300      	movs	r3, #0
 8000866:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_status =FLASH_PAYLOAD_WRITE_FAILED;
 8000868:	2300      	movs	r3, #0
 800086a:	72bb      	strb	r3, [r7, #10]
	uint16_t Host_Packet_Len=0;
 800086c:	2300      	movs	r3, #0
 800086e:	823b      	strh	r3, [r7, #16]
	uint32_t CRC_valu=0;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
	Host_Packet_Len =  Host_Buffer[0]+1;
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <BL_Write_Data+0xb0>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b29b      	uxth	r3, r3
 800087a:	3301      	adds	r3, #1
 800087c:	823b      	strh	r3, [r7, #16]
	CRC_valu = *(uint32_t*)(Host_Buffer+Host_Packet_Len -4);
 800087e:	8a3b      	ldrh	r3, [r7, #16]
 8000880:	3b04      	subs	r3, #4
 8000882:	4a20      	ldr	r2, [pc, #128]	; (8000904 <BL_Write_Data+0xb0>)
 8000884:	4413      	add	r3, r2
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
	if(CRC_VERIFING_PASS == BL_CRC_Verfiy((uint8_t*)&Host_Buffer[0],Host_Packet_Len-4,CRC_valu))
 800088a:	8a3b      	ldrh	r3, [r7, #16]
 800088c:	3b04      	subs	r3, #4
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4619      	mov	r1, r3
 8000892:	481c      	ldr	r0, [pc, #112]	; (8000904 <BL_Write_Data+0xb0>)
 8000894:	f7ff fe9c 	bl	80005d0 <BL_CRC_Verfiy>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d12b      	bne.n	80008f6 <BL_Write_Data+0xa2>
	{
		BL_Send_ACK(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fed2 	bl	8000648 <BL_Send_ACK>
		Address_Host = *((uint32_t*)&Host_Buffer[2]);
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <BL_Write_Data+0xb4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	617b      	str	r3, [r7, #20]
		DataLen = Host_buffer[6];
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	799b      	ldrb	r3, [r3, #6]
 80008ae:	74fb      	strb	r3, [r7, #19]
		Adress_varfiy = BL_Address_Varification(Address_Host);
 80008b0:	6978      	ldr	r0, [r7, #20]
 80008b2:	f7ff ffa5 	bl	8000800 <BL_Address_Varification>
 80008b6:	4603      	mov	r3, r0
 80008b8:	72fb      	strb	r3, [r7, #11]
		if(Adress_varfiy == ADDRESS_IS_VALID)
 80008ba:	7afb      	ldrb	r3, [r7, #11]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d111      	bne.n	80008e4 <BL_Write_Data+0x90>
		{

			//flash
			payload_status = FlashMemory_Paylaod_Write((uint16_t*)&Host_buffer[7],Address_Host,DataLen);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3307      	adds	r3, #7
 80008c4:	7cfa      	ldrb	r2, [r7, #19]
 80008c6:	6979      	ldr	r1, [r7, #20]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f821 	bl	8000910 <FlashMemory_Paylaod_Write>
 80008ce:	4603      	mov	r3, r0
 80008d0:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart2,(uint8_t*)&payload_status,1,HAL_MAX_DELAY);
 80008d2:	f107 010a 	add.w	r1, r7, #10
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	2201      	movs	r2, #1
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <BL_Write_Data+0xb8>)
 80008de:	f001 ff4f 	bl	8002780 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 80008e2:	e00a      	b.n	80008fa <BL_Write_Data+0xa6>
			HAL_UART_Transmit(&huart2,(uint8_t*)&Adress_varfiy,1,HAL_MAX_DELAY);
 80008e4:	f107 010b 	add.w	r1, r7, #11
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <BL_Write_Data+0xb8>)
 80008f0:	f001 ff46 	bl	8002780 <HAL_UART_Transmit>
}
 80008f4:	e001      	b.n	80008fa <BL_Write_Data+0xa6>
		BL_Send_NACK();
 80008f6:	f7ff fec1 	bl	800067c <BL_Send_NACK>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028
 8000908:	2000002a 	.word	0x2000002a
 800090c:	200000f8 	.word	0x200000f8

08000910 <FlashMemory_Paylaod_Write>:



static uint8_t FlashMemory_Paylaod_Write(uint16_t * pdata,uint32_t StartAddress,uint8_t Payloadlen)
{
 8000910:	b5b0      	push	{r4, r5, r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]
	uint32_t Address=0;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
	uint8_t UpdataAdress=0;
 8000922:	2300      	movs	r3, #0
 8000924:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef Hal_status=HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	75bb      	strb	r3, [r7, #22]
	uint8_t payload_status =FLASH_PAYLOAD_WRITE_FAILED;
 800092a:	2300      	movs	r3, #0
 800092c:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Unlock();
 800092e:	f000 fcd7 	bl	80012e0 <HAL_FLASH_Unlock>

	for(uint8_t payload_count=0,UpdataAdress=0;payload_count<Payloadlen/2;payload_count++,UpdataAdress+=2)
 8000932:	2300      	movs	r3, #0
 8000934:	77bb      	strb	r3, [r7, #30]
 8000936:	2300      	movs	r3, #0
 8000938:	777b      	strb	r3, [r7, #29]
 800093a:	e022      	b.n	8000982 <FlashMemory_Paylaod_Write+0x72>
	{
		Address =  StartAddress +UpdataAdress;
 800093c:	7f7b      	ldrb	r3, [r7, #29]
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	4413      	add	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
		Hal_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,pdata[payload_count]);
 8000944:	7fbb      	ldrb	r3, [r7, #30]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4413      	add	r3, r2
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	2200      	movs	r2, #0
 8000952:	461c      	mov	r4, r3
 8000954:	4615      	mov	r5, r2
 8000956:	4622      	mov	r2, r4
 8000958:	462b      	mov	r3, r5
 800095a:	69b9      	ldr	r1, [r7, #24]
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fc6b 	bl	8001238 <HAL_FLASH_Program>
 8000962:	4603      	mov	r3, r0
 8000964:	75bb      	strb	r3, [r7, #22]
		if(Hal_status != HAL_OK)
 8000966:	7dbb      	ldrb	r3, [r7, #22]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <FlashMemory_Paylaod_Write+0x62>
		{
			payload_status =FLASH_PAYLOAD_WRITE_FAILED;
 800096c:	2300      	movs	r3, #0
 800096e:	77fb      	strb	r3, [r7, #31]
 8000970:	e001      	b.n	8000976 <FlashMemory_Paylaod_Write+0x66>
		}
		else{
			payload_status =FLASH_PAYLOAD_WRITE_PASSED;
 8000972:	2301      	movs	r3, #1
 8000974:	77fb      	strb	r3, [r7, #31]
	for(uint8_t payload_count=0,UpdataAdress=0;payload_count<Payloadlen/2;payload_count++,UpdataAdress+=2)
 8000976:	7fbb      	ldrb	r3, [r7, #30]
 8000978:	3301      	adds	r3, #1
 800097a:	77bb      	strb	r3, [r7, #30]
 800097c:	7f7b      	ldrb	r3, [r7, #29]
 800097e:	3302      	adds	r3, #2
 8000980:	777b      	strb	r3, [r7, #29]
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	7fba      	ldrb	r2, [r7, #30]
 800098a:	429a      	cmp	r2, r3
 800098c:	d3d6      	bcc.n	800093c <FlashMemory_Paylaod_Write+0x2c>
		}
	}
	HAL_FLASH_Lock();
 800098e:	f000 fcc9 	bl	8001324 <HAL_FLASH_Lock>
	return payload_status;
 8000992:	7ffb      	ldrb	r3, [r7, #31]

}
 8000994:	4618      	mov	r0, r3
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bdb0      	pop	{r4, r5, r7, pc}

0800099c <Bootloader_Jump_To_Application>:
#define FLASH_SECTOR0_BASE_ADDRESS   0x08008000U
  typedef void (*pMainApp)(void);
  typedef void (*Jump_ptr)(void);

  void Bootloader_Jump_To_Application()
  {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0

  	uint32_t MSP_Value = ((volatile uint32_t)FLASH_SECTOR0_BASE_ADDRESS);
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <Bootloader_Jump_To_Application+0x40>)
 80009a4:	617b      	str	r3, [r7, #20]
  	uint32_t MainAppAdd = ((volatile uint32_t)(FLASH_SECTOR0_BASE_ADDRESS+4));
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <Bootloader_Jump_To_Application+0x44>)
 80009a8:	613b      	str	r3, [r7, #16]

  	pMainApp ResetHandler_Address=(pMainApp)MainAppAdd;
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	60fb      	str	r3, [r7, #12]
  	HAL_RCC_DeInit();
 80009ae:	f001 fb01 	bl	8001fb4 <HAL_RCC_DeInit>
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f383 8808 	msr	MSP, r3
}
 80009bc:	bf00      	nop
  	__set_MSP(MSP_Value);
  	ResetHandler_Address();
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4798      	blx	r3

//////////////////////////////////////
	  typedef void (*Function_t)(void);
	   Function_t addr_to_call = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
	   // Declare SCB_VTOR as a pointer
	   #define SCB_VTOR   (*(volatile uint32_t *)0xE000ED08)


	   // Assign a new value to the VTOR register using the pointer
	   SCB_VTOR = 0x08008000;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <Bootloader_Jump_To_Application+0x48>)
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <Bootloader_Jump_To_Application+0x40>)
 80009ca:	601a      	str	r2, [r3, #0]

	   // Cast the address to call to a function pointer and call it
	   addr_to_call = (Function_t)(0x08008004);
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <Bootloader_Jump_To_Application+0x44>)
 80009ce:	60bb      	str	r3, [r7, #8]
	   addr_to_call();
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4798      	blx	r3

  }
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08008000 	.word	0x08008000
 80009e0:	08008004 	.word	0x08008004
 80009e4:	e000ed08 	.word	0xe000ed08

080009e8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_CRC_Init+0x20>)
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <MX_CRC_Init+0x24>)
 80009f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_CRC_Init+0x20>)
 80009f4:	f000 fbd9 	bl	80011aa <HAL_CRC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009fe:	f000 f917 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000f0 	.word	0x200000f0
 8000a0c:	40023000 	.word	0x40023000

08000a10 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_CRC_MspInit+0x3c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10d      	bne.n	8000a3e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_CRC_MspInit+0x40>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_CRC_MspInit+0x40>)
 8000a2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_CRC_MspInit+0x40>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023000 	.word	0x40023000
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a2c      	ldr	r2, [pc, #176]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a1e      	ldr	r2, [pc, #120]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_GPIO_Init+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2121      	movs	r1, #33	; 0x21
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000ae0:	f000 ff04 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0xd8>)
 8000afc:	f000 fd62 	bl	80015c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000b00:	2321      	movs	r3, #33	; 0x21
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_GPIO_Init+0xd4>)
 8000b18:	f000 fd54 	bl	80015c4 <HAL_GPIO_Init>

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	; 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020800 	.word	0x40020800

08000b30 <main>:
  */

#define FLASH_SECTOR0_BASE_ADDRESS   0x08008000U
typedef void (*pMainApp)(void);
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 f9e2 	bl	8000efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f80c 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f7ff ff8a 	bl	8000a54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b40:	f000 f8e0 	bl	8000d04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000b44:	f000 f908 	bl	8000d58 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000b48:	f7ff ff4e 	bl	80009e8 <MX_CRC_Init>
      */

  while (1)
  {
    /* USER CODE END WHILE */
   BL_FeatchHostCommand();
 8000b4c:	f7ff fcd8 	bl	8000500 <BL_FeatchHostCommand>
 8000b50:	e7fc      	b.n	8000b4c <main+0x1c>
	...

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	2234      	movs	r2, #52	; 0x34
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fa5e 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <SystemClock_Config+0xd4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <SystemClock_Config+0xd4>)
 8000b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <SystemClock_Config+0xd4>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <SystemClock_Config+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba0:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <SystemClock_Config+0xd8>)
 8000ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <SystemClock_Config+0xd8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fade 	bl	80021a4 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bee:	f000 f81f 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fe86 	bl	8001920 <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c1a:	f000 f809 	bl	8000c30 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3750      	adds	r7, #80	; 0x50
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x4c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f000 fa62 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f962 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_USART2_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f001 fcd0 	bl	80026e0 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d46:	f7ff ff73 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000f8 	.word	0x200000f8
 8000d54:	40004400 	.word	0x40004400

08000d58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <MX_USART3_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USART3_UART_Init+0x4c>)
 8000d90:	f001 fca6 	bl	80026e0 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d9a:	f7ff ff49 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000140 	.word	0x20000140
 8000da8:	40004800 	.word	0x40004800

08000dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	; 0x30
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a32      	ldr	r2, [pc, #200]	; (8000e94 <HAL_UART_MspInit+0xe8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12c      	bne.n	8000e28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e06:	230c      	movs	r3, #12
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e16:	2307      	movs	r3, #7
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481e      	ldr	r0, [pc, #120]	; (8000e9c <HAL_UART_MspInit+0xf0>)
 8000e22:	f000 fbcf 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e26:	e031      	b.n	8000e8c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_UART_MspInit+0xf4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12c      	bne.n	8000e8c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_UART_MspInit+0xec>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <HAL_UART_MspInit+0xf8>)
 8000e88:	f000 fb9c 	bl	80015c4 <HAL_GPIO_Init>
}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	40020800 	.word	0x40020800

08000ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eac:	f7ff ff18 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	; (8000ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 f8ad 	bl	8003034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eda:	f7ff fe29 	bl	8000b30 <main>
  bx  lr    
 8000ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eec:	080030c4 	.word	0x080030c4
  ldr r2, =_sbss
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ef4:	200001ac 	.word	0x200001ac

08000ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC_IRQHandler>
	...

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f90d 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe84 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f917 	bl	8001192 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f8ed 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000188 	.word	0x20000188

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000188 	.word	0x20000188

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff47 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff5c 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e00e      	b.n	80011da <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	795b      	ldrb	r3, [r3, #5]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d105      	bne.n	80011d2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fc1f 	bl	8000a10 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b087      	sub	sp, #28
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2202      	movs	r2, #2
 80011f6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e00a      	b.n	8001214 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	441a      	add	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3f0      	bcc.n	80011fe <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2201      	movs	r2, #1
 8001228:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800122a:	693b      	ldr	r3, [r7, #16]
}
 800122c:	4618      	mov	r0, r3
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_FLASH_Program+0xa0>)
 800124c:	7e1b      	ldrb	r3, [r3, #24]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_FLASH_Program+0x1e>
 8001252:	2302      	movs	r3, #2
 8001254:	e03b      	b.n	80012ce <HAL_FLASH_Program+0x96>
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_FLASH_Program+0xa0>)
 8001258:	2201      	movs	r2, #1
 800125a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800125c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001260:	f000 f870 	bl	8001344 <FLASH_WaitForLastOperation>
 8001264:	4603      	mov	r3, r0
 8001266:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d12b      	bne.n	80012c6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001274:	783b      	ldrb	r3, [r7, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f000 f91b 	bl	80014b4 <FLASH_Program_Byte>
 800127e:	e016      	b.n	80012ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d105      	bne.n	8001292 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001286:	883b      	ldrh	r3, [r7, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f000 f8ee 	bl	800146c <FLASH_Program_HalfWord>
 8001290:	e00d      	b.n	80012ae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d105      	bne.n	80012a4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f000 f8c3 	bl	8001428 <FLASH_Program_Word>
 80012a2:	e004      	b.n	80012ae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80012a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f000 f88b 	bl	80013c4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012b2:	f000 f847 	bl	8001344 <FLASH_WaitForLastOperation>
 80012b6:	4603      	mov	r3, r0
 80012b8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_FLASH_Program+0xa4>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_FLASH_Program+0xa4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_FLASH_Program+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	761a      	strb	r2, [r3, #24]
  
  return status;
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000018c 	.word	0x2000018c
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_FLASH_Unlock+0x38>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da0b      	bge.n	800130a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_FLASH_Unlock+0x38>)
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_FLASH_Unlock+0x3c>)
 80012f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_FLASH_Unlock+0x38>)
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_FLASH_Unlock+0x40>)
 80012fc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_FLASH_Unlock+0x38>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	da01      	bge.n	800130a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800130a:	79fb      	ldrb	r3, [r7, #7]
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40023c00 	.word	0x40023c00
 800131c:	45670123 	.word	0x45670123
 8001320:	cdef89ab 	.word	0xcdef89ab

08001324 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_FLASH_Lock+0x1c>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_FLASH_Lock+0x1c>)
 800132e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001332:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40023c00 	.word	0x40023c00

08001344 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <FLASH_WaitForLastOperation+0x78>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001356:	f7ff fe37 	bl	8000fc8 <HAL_GetTick>
 800135a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800135c:	e010      	b.n	8001380 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d00c      	beq.n	8001380 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <FLASH_WaitForLastOperation+0x38>
 800136c:	f7ff fe2c 	bl	8000fc8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	d201      	bcs.n	8001380 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e019      	b.n	80013b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <FLASH_WaitForLastOperation+0x7c>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e8      	bne.n	800135e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <FLASH_WaitForLastOperation+0x7c>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <FLASH_WaitForLastOperation+0x7c>)
 800139a:	2201      	movs	r2, #1
 800139c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <FLASH_WaitForLastOperation+0x7c>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013aa:	f000 f8a5 	bl	80014f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
  
}  
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000018c 	.word	0x2000018c
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <FLASH_Program_DoubleWord+0x60>)
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <FLASH_Program_DoubleWord+0x60>)
 80013d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <FLASH_Program_DoubleWord+0x60>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a10      	ldr	r2, [pc, #64]	; (8001424 <FLASH_Program_DoubleWord+0x60>)
 80013e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <FLASH_Program_DoubleWord+0x60>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <FLASH_Program_DoubleWord+0x60>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80013fa:	f3bf 8f6f 	isb	sy
}
 80013fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	000a      	movs	r2, r1
 800140e:	2300      	movs	r3, #0
 8001410:	68f9      	ldr	r1, [r7, #12]
 8001412:	3104      	adds	r1, #4
 8001414:	4613      	mov	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023c00 	.word	0x40023c00

08001428 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <FLASH_Program_Word+0x40>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <FLASH_Program_Word+0x40>)
 8001438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800143c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <FLASH_Program_Word+0x40>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <FLASH_Program_Word+0x40>)
 8001444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001448:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <FLASH_Program_Word+0x40>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	4a06      	ldr	r2, [pc, #24]	; (8001468 <FLASH_Program_Word+0x40>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40023c00 	.word	0x40023c00

0800146c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <FLASH_Program_HalfWord+0x44>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <FLASH_Program_HalfWord+0x44>)
 800147e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001482:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <FLASH_Program_HalfWord+0x44>)
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <FLASH_Program_HalfWord+0x44>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <FLASH_Program_HalfWord+0x44>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <FLASH_Program_HalfWord+0x44>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	801a      	strh	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <FLASH_Program_Byte+0x40>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <FLASH_Program_Byte+0x40>)
 80014c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <FLASH_Program_Byte+0x40>)
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <FLASH_Program_Byte+0x40>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <FLASH_Program_Byte+0x40>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <FLASH_Program_Byte+0x40>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	701a      	strb	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	4a2b      	ldr	r2, [pc, #172]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 8001512:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001516:	2210      	movs	r2, #16
 8001518:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 0320 	and.w	r3, r3, #32
 8001522:	2b00      	cmp	r3, #0
 8001524:	d008      	beq.n	8001538 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 8001530:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001532:	4b22      	ldr	r3, [pc, #136]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001534:	2220      	movs	r2, #32
 8001536:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 800154e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 800156c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 800158a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 800158e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001592:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	f043 0320 	orr.w	r3, r3, #32
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <FLASH_SetErrorCode+0xc8>)
 80015aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <FLASH_SetErrorCode+0xc4>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	60da      	str	r2, [r3, #12]
  }
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40023c00 	.word	0x40023c00
 80015c0:	2000018c 	.word	0x2000018c

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e165      	b.n	80018ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8154 	bne.w	80018a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d005      	beq.n	8001616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	2b02      	cmp	r3, #2
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d017      	beq.n	80016b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80ae 	beq.w	80018a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <HAL_GPIO_Init+0x300>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a5c      	ldr	r2, [pc, #368]	; (80018c4 <HAL_GPIO_Init+0x300>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <HAL_GPIO_Init+0x300>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_GPIO_Init+0x304>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x308>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x21a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4e      	ldr	r2, [pc, #312]	; (80018d0 <HAL_GPIO_Init+0x30c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x216>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_GPIO_Init+0x310>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x212>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x314>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <HAL_GPIO_Init+0x318>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x20a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4a      	ldr	r2, [pc, #296]	; (80018e0 <HAL_GPIO_Init+0x31c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x206>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <HAL_GPIO_Init+0x320>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x202>
 80017c2:	2306      	movs	r3, #6
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017c6:	2307      	movs	r3, #7
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x21c>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x304>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x324>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <HAL_GPIO_Init+0x324>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <HAL_GPIO_Init+0x324>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x324>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_GPIO_Init+0x324>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f ae96 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018fc:	787b      	ldrb	r3, [r7, #1]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001902:	887a      	ldrh	r2, [r7, #2]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	041a      	lsls	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	619a      	str	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0cc      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001934:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 030f 	and.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	429a      	cmp	r2, r3
 8001940:	d90c      	bls.n	800195c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0b8      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800197e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a52      	ldr	r2, [pc, #328]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	494d      	ldr	r1, [pc, #308]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d044      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e07f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d107      	bne.n	80019ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e06f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e067      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f023 0203 	bic.w	r2, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4934      	ldr	r1, [pc, #208]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a10:	f7ff fada 	bl	8000fc8 <HAL_GetTick>
 8001a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	e00a      	b.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a18:	f7ff fad6 	bl	8000fc8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04f      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 020c 	and.w	r2, r3, #12
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d1eb      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d20c      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e032      	b.n	8001ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4916      	ldr	r1, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d009      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aa6:	f000 f855 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	490a      	ldr	r1, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	5ccb      	ldrb	r3, [r1, r3]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa3a 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023c00 	.word	0x40023c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	0800309c 	.word	0x0800309c
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	080030ac 	.word	0x080030ac

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffdc 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	080030ac 	.word	0x080030ac

08001b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b58:	b0ae      	sub	sp, #184	; 0xb8
 8001b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7a:	4bcb      	ldr	r3, [pc, #812]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	f200 8206 	bhi.w	8001f94 <HAL_RCC_GetSysClockFreq+0x440>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001bc5 	.word	0x08001bc5
 8001b94:	08001f95 	.word	0x08001f95
 8001b98:	08001f95 	.word	0x08001f95
 8001b9c:	08001f95 	.word	0x08001f95
 8001ba0:	08001bcd 	.word	0x08001bcd
 8001ba4:	08001f95 	.word	0x08001f95
 8001ba8:	08001f95 	.word	0x08001f95
 8001bac:	08001f95 	.word	0x08001f95
 8001bb0:	08001bd5 	.word	0x08001bd5
 8001bb4:	08001f95 	.word	0x08001f95
 8001bb8:	08001f95 	.word	0x08001f95
 8001bbc:	08001f95 	.word	0x08001f95
 8001bc0:	08001dc5 	.word	0x08001dc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4bb9      	ldr	r3, [pc, #740]	; (8001eac <HAL_RCC_GetSysClockFreq+0x358>)
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001bca:	e1e7      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bcc:	4bb8      	ldr	r3, [pc, #736]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bd2:	e1e3      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd4:	4bb4      	ldr	r3, [pc, #720]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be0:	4bb1      	ldr	r3, [pc, #708]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d071      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bec:	4bae      	ldr	r3, [pc, #696]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	099b      	lsrs	r3, r3, #6
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bf8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c12:	4622      	mov	r2, r4
 8001c14:	462b      	mov	r3, r5
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0159      	lsls	r1, r3, #5
 8001c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c24:	0150      	lsls	r0, r2, #5
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	1a51      	subs	r1, r2, r1
 8001c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8001c30:	4629      	mov	r1, r5
 8001c32:	eb63 0301 	sbc.w	r3, r3, r1
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c44:	4649      	mov	r1, r9
 8001c46:	018b      	lsls	r3, r1, #6
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c4e:	4641      	mov	r1, r8
 8001c50:	018a      	lsls	r2, r1, #6
 8001c52:	4641      	mov	r1, r8
 8001c54:	1a51      	subs	r1, r2, r1
 8001c56:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c58:	4649      	mov	r1, r9
 8001c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	00cb      	lsls	r3, r1, #3
 8001c70:	4641      	mov	r1, r8
 8001c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c76:	4641      	mov	r1, r8
 8001c78:	00ca      	lsls	r2, r1, #3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4622      	mov	r2, r4
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
 8001c86:	462b      	mov	r3, r5
 8001c88:	460a      	mov	r2, r1
 8001c8a:	eb42 0303 	adc.w	r3, r2, r3
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	024b      	lsls	r3, r1, #9
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	024a      	lsls	r2, r1, #9
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001cbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001cc0:	f7fe faa0 	bl	8000204 <__aeabi_uldivmod>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4613      	mov	r3, r2
 8001cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cce:	e067      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cdc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cea:	2300      	movs	r3, #0
 8001cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	f04f 0000 	mov.w	r0, #0
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	0159      	lsls	r1, r3, #5
 8001d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d04:	0150      	lsls	r0, r2, #5
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	1a51      	subs	r1, r2, r1
 8001d0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d10:	4629      	mov	r1, r5
 8001d12:	eb63 0301 	sbc.w	r3, r3, r1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001d24:	4649      	mov	r1, r9
 8001d26:	018b      	lsls	r3, r1, #6
 8001d28:	4641      	mov	r1, r8
 8001d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d2e:	4641      	mov	r1, r8
 8001d30:	018a      	lsls	r2, r1, #6
 8001d32:	4641      	mov	r1, r8
 8001d34:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d38:	4649      	mov	r1, r9
 8001d3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d52:	4692      	mov	sl, r2
 8001d54:	469b      	mov	fp, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	eb1a 0303 	adds.w	r3, sl, r3
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	462b      	mov	r3, r5
 8001d60:	eb4b 0303 	adc.w	r3, fp, r3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d72:	4629      	mov	r1, r5
 8001d74:	028b      	lsls	r3, r1, #10
 8001d76:	4621      	mov	r1, r4
 8001d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	028a      	lsls	r2, r1, #10
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d88:	2200      	movs	r2, #0
 8001d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8001d8c:	677a      	str	r2, [r7, #116]	; 0x74
 8001d8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d92:	f7fe fa37 	bl	8000204 <__aeabi_uldivmod>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dc2:	e0eb      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d06b      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	099b      	lsrs	r3, r3, #6
 8001de2:	2200      	movs	r2, #0
 8001de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dee:	663b      	str	r3, [r7, #96]	; 0x60
 8001df0:	2300      	movs	r3, #0
 8001df2:	667b      	str	r3, [r7, #100]	; 0x64
 8001df4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001df8:	4622      	mov	r2, r4
 8001dfa:	462b      	mov	r3, r5
 8001dfc:	f04f 0000 	mov.w	r0, #0
 8001e00:	f04f 0100 	mov.w	r1, #0
 8001e04:	0159      	lsls	r1, r3, #5
 8001e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e0a:	0150      	lsls	r0, r2, #5
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4621      	mov	r1, r4
 8001e12:	1a51      	subs	r1, r2, r1
 8001e14:	61b9      	str	r1, [r7, #24]
 8001e16:	4629      	mov	r1, r5
 8001e18:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e2a:	4659      	mov	r1, fp
 8001e2c:	018b      	lsls	r3, r1, #6
 8001e2e:	4651      	mov	r1, sl
 8001e30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e34:	4651      	mov	r1, sl
 8001e36:	018a      	lsls	r2, r1, #6
 8001e38:	4651      	mov	r1, sl
 8001e3a:	ebb2 0801 	subs.w	r8, r2, r1
 8001e3e:	4659      	mov	r1, fp
 8001e40:	eb63 0901 	sbc.w	r9, r3, r1
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e58:	4690      	mov	r8, r2
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	4623      	mov	r3, r4
 8001e5e:	eb18 0303 	adds.w	r3, r8, r3
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	462b      	mov	r3, r5
 8001e66:	eb49 0303 	adc.w	r3, r9, r3
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e78:	4629      	mov	r1, r5
 8001e7a:	024b      	lsls	r3, r1, #9
 8001e7c:	4621      	mov	r1, r4
 8001e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e82:	4621      	mov	r1, r4
 8001e84:	024a      	lsls	r2, r1, #9
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e8e:	2200      	movs	r2, #0
 8001e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e98:	f7fe f9b4 	bl	8000204 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ea6:	e065      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x420>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_RCC_GetSysClockFreq+0x458>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8001eca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ece:	4642      	mov	r2, r8
 8001ed0:	464b      	mov	r3, r9
 8001ed2:	f04f 0000 	mov.w	r0, #0
 8001ed6:	f04f 0100 	mov.w	r1, #0
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee0:	0150      	lsls	r0, r2, #5
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	1a51      	subs	r1, r2, r1
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	4649      	mov	r1, r9
 8001eee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f00:	4659      	mov	r1, fp
 8001f02:	018b      	lsls	r3, r1, #6
 8001f04:	4651      	mov	r1, sl
 8001f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f0a:	4651      	mov	r1, sl
 8001f0c:	018a      	lsls	r2, r1, #6
 8001f0e:	4651      	mov	r1, sl
 8001f10:	1a54      	subs	r4, r2, r1
 8001f12:	4659      	mov	r1, fp
 8001f14:	eb63 0501 	sbc.w	r5, r3, r1
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	00eb      	lsls	r3, r5, #3
 8001f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f26:	00e2      	lsls	r2, r4, #3
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	18e3      	adds	r3, r4, r3
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	464b      	mov	r3, r9
 8001f34:	eb45 0303 	adc.w	r3, r5, r3
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f46:	4629      	mov	r1, r5
 8001f48:	028b      	lsls	r3, r1, #10
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f50:	4621      	mov	r1, r4
 8001f52:	028a      	lsls	r2, r1, #10
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f66:	f7fe f94d 	bl	8000204 <__aeabi_uldivmod>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4613      	mov	r3, r2
 8001f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_RCC_GetSysClockFreq+0x458>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0f1b      	lsrs	r3, r3, #28
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f92:	e003      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	37b8      	adds	r7, #184	; 0xb8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	00f42400 	.word	0x00f42400

08001fb4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fba:	f7ff f805 	bl	8000fc8 <HAL_GetTick>
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fc0:	4b72      	ldr	r3, [pc, #456]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a71      	ldr	r2, [pc, #452]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7fe fffb 	bl	8000fc8 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0d0      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001fec:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ff8:	f7fe ffe6 	bl	8000fc8 <HAL_GetTick>
 8001ffc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7fe ffdf 	bl	8000fc8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0b2      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800201c:	4b5b      	ldr	r3, [pc, #364]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ee      	bne.n	8002006 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002028:	f7fe ffce 	bl	8000fc8 <HAL_GetTick>
 800202c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002034:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002038:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe ffc4 	bl	8000fc8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e099      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800204e:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800205a:	f7fe ffb5 	bl	8000fc8 <HAL_GetTick>
 800205e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002060:	4b4a      	ldr	r3, [pc, #296]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800206a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206e:	f7fe ffab 	bl	8000fc8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e080      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002080:	4b42      	ldr	r3, [pc, #264]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800208c:	f7fe ff9c 	bl	8000fc8 <HAL_GetTick>
 8002090:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a3d      	ldr	r2, [pc, #244]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800209c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020a0:	f7fe ff92 	bl	8000fc8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e067      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80020be:	f7fe ff83 	bl	8000fc8 <HAL_GetTick>
 80020c2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020d2:	f7fe ff79 	bl	8000fc8 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e04e      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <HAL_RCC_DeInit+0x1dc>)
 80020f4:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 80020f8:	4a25      	ldr	r2, [pc, #148]	; (8002190 <HAL_RCC_DeInit+0x1dc>)
 80020fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002100:	4a24      	ldr	r2, [pc, #144]	; (8002194 <HAL_RCC_DeInit+0x1e0>)
 8002102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	4a20      	ldr	r2, [pc, #128]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 800210c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002110:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800211c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002128:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4a17      	ldr	r2, [pc, #92]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002130:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002134:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 800213c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002140:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002148:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800214c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_RCC_DeInit+0x1d8>)
 8002160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002164:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_RCC_DeInit+0x1e4>)
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <HAL_RCC_DeInit+0x1e8>)
 800216a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_RCC_DeInit+0x1ec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fee5 	bl	8000f40 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002180:	2300      	movs	r3, #0
  }
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	24003010 	.word	0x24003010
 8002194:	04003010 	.word	0x04003010
 8002198:	20000000 	.word	0x20000000
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	20000004 	.word	0x20000004

080021a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e28d      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8083 	beq.w	80022ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021c4:	4b94      	ldr	r3, [pc, #592]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d019      	beq.n	8002204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021d0:	4b91      	ldr	r3, [pc, #580]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021dc:	4b8e      	ldr	r3, [pc, #568]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e8:	d00c      	beq.n	8002204 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ea:	4b8b      	ldr	r3, [pc, #556]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d112      	bne.n	800221c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f6:	4b88      	ldr	r3, [pc, #544]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002202:	d10b      	bne.n	800221c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	4b84      	ldr	r3, [pc, #528]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x124>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d157      	bne.n	80022c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e25a      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x90>
 8002226:	4b7c      	ldr	r3, [pc, #496]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7b      	ldr	r2, [pc, #492]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xcc>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xb4>
 800223e:	4b76      	ldr	r3, [pc, #472]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a75      	ldr	r2, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b73      	ldr	r3, [pc, #460]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a72      	ldr	r2, [pc, #456]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xcc>
 8002258:	4b6f      	ldr	r3, [pc, #444]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6e      	ldr	r2, [pc, #440]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6b      	ldr	r2, [pc, #428]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fea6 	bl	8000fc8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7fe fea2 	bl	8000fc8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e21f      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xdc>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fe92 	bl	8000fc8 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe fe8e 	bl	8000fc8 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e20b      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b57      	ldr	r3, [pc, #348]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x104>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d06f      	beq.n	80023b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022d6:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d017      	beq.n	8002312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022e2:	4b4d      	ldr	r3, [pc, #308]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ee:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b44      	ldr	r3, [pc, #272]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x186>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1d3      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x278>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234e:	f7fe fe3b 	bl	8000fc8 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe fe37 	bl	8000fc8 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e1b4      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4925      	ldr	r1, [pc, #148]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCC_OscConfig+0x278>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fe1a 	bl	8000fc8 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fe16 	bl	8000fc8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e193      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d036      	beq.n	8002430 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fdfa 	bl	8000fc8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d8:	f7fe fdf6 	bl	8000fc8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e173      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x234>
 80023f6:	e01b      	b.n	8002430 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7fe fde3 	bl	8000fc8 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	e00e      	b.n	8002424 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe fddf 	bl	8000fc8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d907      	bls.n	8002424 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e15c      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
 8002418:	40023800 	.word	0x40023800
 800241c:	42470000 	.word	0x42470000
 8002420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002424:	4b8a      	ldr	r3, [pc, #552]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ea      	bne.n	8002406 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8097 	beq.w	800256c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b83      	ldr	r3, [pc, #524]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a7e      	ldr	r2, [pc, #504]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246e:	4b79      	ldr	r3, [pc, #484]	; (8002654 <HAL_RCC_OscConfig+0x4b0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d118      	bne.n	80024ac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247a:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x4b0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a75      	ldr	r2, [pc, #468]	; (8002654 <HAL_RCC_OscConfig+0x4b0>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002486:	f7fe fd9f 	bl	8000fc8 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7fe fd9b 	bl	8000fc8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e118      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <HAL_RCC_OscConfig+0x4b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x31e>
 80024b4:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a65      	ldr	r2, [pc, #404]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	e01c      	b.n	80024fc <HAL_RCC_OscConfig+0x358>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x340>
 80024ca:	4b61      	ldr	r3, [pc, #388]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a60      	ldr	r2, [pc, #384]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	4b5e      	ldr	r3, [pc, #376]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a5d      	ldr	r2, [pc, #372]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x358>
 80024e4:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a59      	ldr	r2, [pc, #356]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a56      	ldr	r2, [pc, #344]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	f023 0304 	bic.w	r3, r3, #4
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d015      	beq.n	8002530 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fd60 	bl	8000fc8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fd5c 	bl	8000fc8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0d7      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ee      	beq.n	800250c <HAL_RCC_OscConfig+0x368>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fd4a 	bl	8000fc8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002538:	f7fe fd46 	bl	8000fc8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0c1      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	4b40      	ldr	r3, [pc, #256]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a3a      	ldr	r2, [pc, #232]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80ad 	beq.w	80026d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002576:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b08      	cmp	r3, #8
 8002580:	d060      	beq.n	8002644 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d145      	bne.n	8002616 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_RCC_OscConfig+0x4b4>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fd1a 	bl	8000fc8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fd16 	bl	8000fc8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e093      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	3b01      	subs	r3, #1
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	061b      	lsls	r3, r3, #24
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	071b      	lsls	r3, r3, #28
 80025e2:	491b      	ldr	r1, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x4b4>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7fe fceb 	bl	8000fc8 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe fce7 	bl	8000fc8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e064      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x452>
 8002614:	e05c      	b.n	80026d0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCC_OscConfig+0x4b4>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fcd4 	bl	8000fc8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fcd0 	bl	8000fc8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e04d      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x480>
 8002642:	e045      	b.n	80026d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e040      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
 8002650:	40023800 	.word	0x40023800
 8002654:	40007000 	.word	0x40007000
 8002658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_RCC_OscConfig+0x538>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d030      	beq.n	80026cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d129      	bne.n	80026cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d122      	bne.n	80026cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002694:	4293      	cmp	r3, r2
 8002696:	d119      	bne.n	80026cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	3b01      	subs	r3, #1
 80026a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d10f      	bne.n	80026cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e042      	b.n	8002778 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fb50 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	; 0x24
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fa09 	bl	8002b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b20      	cmp	r3, #32
 800279e:	d175      	bne.n	800288c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_UART_Transmit+0x2c>
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e06e      	b.n	800288e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2221      	movs	r2, #33	; 0x21
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027be:	f7fe fc03 	bl	8000fc8 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d108      	bne.n	80027ec <HAL_UART_Transmit+0x6c>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	e003      	b.n	80027f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027f4:	e02e      	b.n	8002854 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f8df 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e03a      	b.n	800288e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10b      	bne.n	8002836 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	3302      	adds	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e007      	b.n	8002846 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	3301      	adds	r3, #1
 8002844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1cb      	bne.n	80027f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f8ab 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e006      	b.n	800288e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	e000      	b.n	800288e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800288c:	2302      	movs	r3, #2
  }
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08a      	sub	sp, #40	; 0x28
 800289a:	af02      	add	r7, sp, #8
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	f040 8081 	bne.w	80029ba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_UART_Receive+0x2e>
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e079      	b.n	80029bc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2222      	movs	r2, #34	; 0x22
 80028d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fb74 	bl	8000fc8 <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	d108      	bne.n	800290a <HAL_UART_Receive+0x74>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e003      	b.n	8002912 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002912:	e047      	b.n	80029a4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	2120      	movs	r1, #32
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f850 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e042      	b.n	80029bc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	b29a      	uxth	r2, r3
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	3302      	adds	r3, #2
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	e01f      	b.n	8002996 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	d007      	beq.n	8002970 <HAL_UART_Receive+0xda>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_UART_Receive+0xe8>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d106      	bne.n	800297e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e008      	b.n	8002990 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800298a:	b2da      	uxtb	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3301      	adds	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1b2      	bne.n	8002914 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d4:	e03b      	b.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d037      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7fe faf3 	bl	8000fc8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e03a      	b.n	8002a6e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d023      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d020      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d01d      	beq.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d116      	bne.n	8002a4e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f81d 	bl	8002a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2208      	movs	r2, #8
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d0b4      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b095      	sub	sp, #84	; 0x54
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a9e:	643a      	str	r2, [r7, #64]	; 0x40
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d119      	bne.n	8002b22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f023 0310 	bic.w	r3, r3, #16
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b0e:	61ba      	str	r2, [r7, #24]
 8002b10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b12:	6979      	ldr	r1, [r7, #20]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	e841 2300 	strex	r3, r2, [r1]
 8002b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1e5      	bne.n	8002aee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b30:	bf00      	nop
 8002b32:	3754      	adds	r7, #84	; 0x54
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b0c0      	sub	sp, #256	; 0x100
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	ea40 0301 	orr.w	r3, r0, r1
 8002b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b94:	f021 010c 	bic.w	r1, r1, #12
 8002b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb6:	6999      	ldr	r1, [r3, #24]
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	ea40 0301 	orr.w	r3, r0, r1
 8002bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b8f      	ldr	r3, [pc, #572]	; (8002e08 <UART_SetConfig+0x2cc>)
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d005      	beq.n	8002bdc <UART_SetConfig+0xa0>
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b8d      	ldr	r3, [pc, #564]	; (8002e0c <UART_SetConfig+0x2d0>)
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d104      	bne.n	8002be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bdc:	f7fe ffa6 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8002be0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002be4:	e003      	b.n	8002bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7fe ff8d 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8002bea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf8:	f040 810c 	bne.w	8002e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c0e:	4622      	mov	r2, r4
 8002c10:	462b      	mov	r3, r5
 8002c12:	1891      	adds	r1, r2, r2
 8002c14:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c16:	415b      	adcs	r3, r3
 8002c18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c1e:	4621      	mov	r1, r4
 8002c20:	eb12 0801 	adds.w	r8, r2, r1
 8002c24:	4629      	mov	r1, r5
 8002c26:	eb43 0901 	adc.w	r9, r3, r1
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c3e:	4690      	mov	r8, r2
 8002c40:	4699      	mov	r9, r3
 8002c42:	4623      	mov	r3, r4
 8002c44:	eb18 0303 	adds.w	r3, r8, r3
 8002c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	eb49 0303 	adc.w	r3, r9, r3
 8002c52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	18db      	adds	r3, r3, r3
 8002c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c70:	4613      	mov	r3, r2
 8002c72:	eb42 0303 	adc.w	r3, r2, r3
 8002c76:	657b      	str	r3, [r7, #84]	; 0x54
 8002c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c80:	f7fd fac0 	bl	8000204 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4b61      	ldr	r3, [pc, #388]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	011c      	lsls	r4, r3, #4
 8002c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c96:	2200      	movs	r2, #0
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	1891      	adds	r1, r2, r2
 8002caa:	64b9      	str	r1, [r7, #72]	; 0x48
 8002cac:	415b      	adcs	r3, r3
 8002cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8002cba:	4649      	mov	r1, r9
 8002cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd4:	4692      	mov	sl, r2
 8002cd6:	469b      	mov	fp, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	eb1a 0303 	adds.w	r3, sl, r3
 8002cde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8002ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d00:	460b      	mov	r3, r1
 8002d02:	18db      	adds	r3, r3, r3
 8002d04:	643b      	str	r3, [r7, #64]	; 0x40
 8002d06:	4613      	mov	r3, r2
 8002d08:	eb42 0303 	adc.w	r3, r2, r3
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d16:	f7fd fa75 	bl	8000204 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002d22:	fba3 2301 	umull	r2, r3, r3, r1
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2264      	movs	r2, #100	; 0x64
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	1acb      	subs	r3, r1, r3
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002d38:	fba3 2302 	umull	r2, r3, r3, r2
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d44:	441c      	add	r4, r3
 8002d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d58:	4642      	mov	r2, r8
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d60:	415b      	adcs	r3, r3
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d68:	4641      	mov	r1, r8
 8002d6a:	1851      	adds	r1, r2, r1
 8002d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d6e:	4649      	mov	r1, r9
 8002d70:	414b      	adcs	r3, r1
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d80:	4659      	mov	r1, fp
 8002d82:	00cb      	lsls	r3, r1, #3
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	00ca      	lsls	r2, r1, #3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	4642      	mov	r2, r8
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d9c:	464b      	mov	r3, r9
 8002d9e:	460a      	mov	r2, r1
 8002da0:	eb42 0303 	adc.w	r3, r2, r3
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002db4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	18db      	adds	r3, r3, r3
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	eb42 0303 	adc.w	r3, r2, r3
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002dd2:	f7fd fa17 	bl	8000204 <__aeabi_uldivmod>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	2164      	movs	r1, #100	; 0x64
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	3332      	adds	r3, #50	; 0x32
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <UART_SetConfig+0x2d4>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	f003 0207 	and.w	r2, r3, #7
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4422      	add	r2, r4
 8002e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e04:	e106      	b.n	8003014 <UART_SetConfig+0x4d8>
 8002e06:	bf00      	nop
 8002e08:	40011000 	.word	0x40011000
 8002e0c:	40011400 	.word	0x40011400
 8002e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e26:	4642      	mov	r2, r8
 8002e28:	464b      	mov	r3, r9
 8002e2a:	1891      	adds	r1, r2, r2
 8002e2c:	6239      	str	r1, [r7, #32]
 8002e2e:	415b      	adcs	r3, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e36:	4641      	mov	r1, r8
 8002e38:	1854      	adds	r4, r2, r1
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	eb43 0501 	adc.w	r5, r3, r1
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	00eb      	lsls	r3, r5, #3
 8002e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4643      	mov	r3, r8
 8002e56:	18e3      	adds	r3, r4, r3
 8002e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e5c:	464b      	mov	r3, r9
 8002e5e:	eb45 0303 	adc.w	r3, r5, r3
 8002e62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e82:	4629      	mov	r1, r5
 8002e84:	008b      	lsls	r3, r1, #2
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	008a      	lsls	r2, r1, #2
 8002e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e94:	f7fd f9b6 	bl	8000204 <__aeabi_uldivmod>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4b60      	ldr	r3, [pc, #384]	; (8003020 <UART_SetConfig+0x4e4>)
 8002e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea2:	095b      	lsrs	r3, r3, #5
 8002ea4:	011c      	lsls	r4, r3, #4
 8002ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002eb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	61b9      	str	r1, [r7, #24]
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec8:	4641      	mov	r1, r8
 8002eca:	1851      	adds	r1, r2, r1
 8002ecc:	6139      	str	r1, [r7, #16]
 8002ece:	4649      	mov	r1, r9
 8002ed0:	414b      	adcs	r3, r1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	00cb      	lsls	r3, r1, #3
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eea:	4651      	mov	r1, sl
 8002eec:	00ca      	lsls	r2, r1, #3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002efc:	464b      	mov	r3, r9
 8002efe:	460a      	mov	r2, r1
 8002f00:	eb42 0303 	adc.w	r3, r2, r3
 8002f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f20:	4649      	mov	r1, r9
 8002f22:	008b      	lsls	r3, r1, #2
 8002f24:	4641      	mov	r1, r8
 8002f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	008a      	lsls	r2, r1, #2
 8002f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f32:	f7fd f967 	bl	8000204 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4b38      	ldr	r3, [pc, #224]	; (8003020 <UART_SetConfig+0x4e4>)
 8002f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2264      	movs	r2, #100	; 0x64
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	1acb      	subs	r3, r1, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a33      	ldr	r2, [pc, #204]	; (8003020 <UART_SetConfig+0x4e4>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	441c      	add	r4, r3
 8002f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f62:	2200      	movs	r2, #0
 8002f64:	673b      	str	r3, [r7, #112]	; 0x70
 8002f66:	677a      	str	r2, [r7, #116]	; 0x74
 8002f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	415b      	adcs	r3, r3
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	1851      	adds	r1, r2, r1
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	4649      	mov	r1, r9
 8002f84:	414b      	adcs	r3, r1
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f94:	4659      	mov	r1, fp
 8002f96:	00cb      	lsls	r3, r1, #3
 8002f98:	4651      	mov	r1, sl
 8002f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	00ca      	lsls	r2, r1, #3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4642      	mov	r2, r8
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fae:	464b      	mov	r3, r9
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	eb42 0303 	adc.w	r3, r2, r3
 8002fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc2:	667a      	str	r2, [r7, #100]	; 0x64
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	008b      	lsls	r3, r1, #2
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fda:	4641      	mov	r1, r8
 8002fdc:	008a      	lsls	r2, r1, #2
 8002fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002fe2:	f7fd f90f 	bl	8000204 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <UART_SetConfig+0x4e4>)
 8002fec:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	2164      	movs	r1, #100	; 0x64
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	3332      	adds	r3, #50	; 0x32
 8002ffe:	4a08      	ldr	r2, [pc, #32]	; (8003020 <UART_SetConfig+0x4e4>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4422      	add	r2, r4
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800301a:	46bd      	mov	sp, r7
 800301c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003020:	51eb851f 	.word	0x51eb851f

08003024 <memset>:
 8003024:	4402      	add	r2, r0
 8003026:	4603      	mov	r3, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	f803 1b01 	strb.w	r1, [r3], #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <__libc_init_array>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	4d0d      	ldr	r5, [pc, #52]	; (800306c <__libc_init_array+0x38>)
 8003038:	4c0d      	ldr	r4, [pc, #52]	; (8003070 <__libc_init_array+0x3c>)
 800303a:	1b64      	subs	r4, r4, r5
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	2600      	movs	r6, #0
 8003040:	42a6      	cmp	r6, r4
 8003042:	d109      	bne.n	8003058 <__libc_init_array+0x24>
 8003044:	4d0b      	ldr	r5, [pc, #44]	; (8003074 <__libc_init_array+0x40>)
 8003046:	4c0c      	ldr	r4, [pc, #48]	; (8003078 <__libc_init_array+0x44>)
 8003048:	f000 f818 	bl	800307c <_init>
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	2600      	movs	r6, #0
 8003052:	42a6      	cmp	r6, r4
 8003054:	d105      	bne.n	8003062 <__libc_init_array+0x2e>
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	f855 3b04 	ldr.w	r3, [r5], #4
 800305c:	4798      	blx	r3
 800305e:	3601      	adds	r6, #1
 8003060:	e7ee      	b.n	8003040 <__libc_init_array+0xc>
 8003062:	f855 3b04 	ldr.w	r3, [r5], #4
 8003066:	4798      	blx	r3
 8003068:	3601      	adds	r6, #1
 800306a:	e7f2      	b.n	8003052 <__libc_init_array+0x1e>
 800306c:	080030bc 	.word	0x080030bc
 8003070:	080030bc 	.word	0x080030bc
 8003074:	080030bc 	.word	0x080030bc
 8003078:	080030c0 	.word	0x080030c0

0800307c <_init>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr

08003088 <_fini>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr
